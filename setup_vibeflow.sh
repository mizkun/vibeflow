#!/bin/bash

# Vibe Coding Framework Setup Script
# Version: 2.0
# This is the main setup script that orchestrates the installation

set -e  # Exit on error
set -u  # Exit on undefined variable

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="${SCRIPT_DIR}/lib"

# Check if lib directory exists
if [ ! -d "$LIB_DIR" ]; then
    echo "‚ùå Error: lib directory not found at $LIB_DIR"
    echo "Please ensure all files are properly extracted."
    exit 1
fi

# Source common functions
source "${LIB_DIR}/common.sh"

# Source all modules
source "${LIB_DIR}/create_structure.sh"
source "${LIB_DIR}/create_claude_md.sh"
source "${LIB_DIR}/create_commands.sh"
source "${LIB_DIR}/create_agents.sh"
source "${LIB_DIR}/create_templates.sh"

# Global variables
VERSION="2.0"
FORCE_INSTALL=false
BACKUP_ENABLED=true
VERBOSE=false

# Function to show usage
show_usage() {
    cat << EOF
Vibe Coding Framework Setup Script v${VERSION}

Usage: $0 [OPTIONS]

Options:
    -h, --help          Show this help message
    -f, --force         Force installation without confirmation
    -n, --no-backup     Skip backup of existing files
    -v, --verbose       Enable verbose output
    -V, --version       Show version information

Examples:
    $0                  Normal installation with confirmations
    $0 --force          Install without asking for confirmation
    $0 --no-backup      Install without creating backups

EOF
}

# Function to parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -f|--force)
                FORCE_INSTALL=true
                shift
                ;;
            -n|--no-backup)
                BACKUP_ENABLED=false
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -V|--version)
                echo "Vibe Coding Framework Setup Script v${VERSION}"
                exit 0
                ;;
            *)
                error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
}

# Function to show welcome message
show_welcome() {
    clear
    print_color "$CYAN" "
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë     üöÄ Vibe Coding Framework Setup Script v${VERSION}              ‚ïë
‚ïë                                                              ‚ïë
‚ïë     An AI-driven development methodology with                ‚ïë
‚ïë     role separation and structured workflow automation       ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"
    echo ""
    info "„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ‰ª•‰∏ã„ÇíÂÆüË°å„Åó„Åæ„ÅôÔºö"
    echo "  ‚Ä¢ „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÅÆ‰ΩúÊàê"
    echo "  ‚Ä¢ CLAUDE.md„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÁîüÊàê"
    echo "  ‚Ä¢ „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÅÆË®≠ÂÆö"
    echo "  ‚Ä¢ 4„Å§„ÅÆSubagent„ÅÆ‰ΩúÊàê"
    echo "  ‚Ä¢ „ÉÜ„É≥„Éó„É¨„Éº„Éà„Éï„Ç°„Ç§„É´„ÅÆÁîüÊàê"
    echo ""
}

# Function to check if running in vibeflow repository
check_repository_location() {
    local current_dir="$(pwd)"
    local script_parent_dir="$(dirname "$SCRIPT_DIR")"
    
    # Check if we're in the vibeflow repository itself
    if [ -f "$current_dir/setup_vibeflow.sh" ] && [ -d "$current_dir/lib" ] && [ -d "$current_dir/docs" ]; then
        warning "Vibe Coding„É™„Éù„Ç∏„Éà„É™ÂÜÖ„ÅßÂÆüË°å„Åó„Çà„ÅÜ„Å®„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ"
        echo ""
        echo "  Êé®Â•®„Åï„Çå„Çã‰Ωø„ÅÑÊñπÔºö"
        echo "  1. Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê"
        echo "  2. „Åù„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´ÁßªÂãï"
        echo "  3. „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÇíÂÆüË°å"
        echo ""
        echo "  ‰æã:"
        echo "    mkdir ~/my-project"
        echo "    cd ~/my-project"
        echo "    $SCRIPT_DIR/setup_vibeflow.sh"
        echo ""
        
        if [ "$FORCE_INSTALL" = false ]; then
            if ! confirm "Êú¨ÂΩì„Å´„Åì„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅßÁ∂öË°å„Åó„Åæ„Åô„ÅãÔºü"; then
                info "„Ç§„É≥„Çπ„Éà„Éº„É´„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü„ÄÇ"
                exit 0
            fi
        fi
    fi
}

# Function to check existing installation
check_existing_installation() {
    local has_existing=false
    
    if [ -f "CLAUDE.md" ] || [ -d ".claude" ] || [ -d ".vibe" ]; then
        has_existing=true
    fi
    
    if [ "$has_existing" = true ] && [ "$FORCE_INSTALL" = false ]; then
        warning "Êó¢Â≠ò„ÅÆVibe CodingË®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÇ"
        if ! confirm "Êó¢Â≠ò„ÅÆË®≠ÂÆö„Çí‰∏äÊõ∏„Åç„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü"; then
            info "„Ç§„É≥„Çπ„Éà„Éº„É´„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü„ÄÇ"
            exit 0
        fi
    fi
}

# Function to create backup
create_backup() {
    if [ "$BACKUP_ENABLED" = false ]; then
        return 0
    fi
    
    local backup_dir=".vibe_backup_$(date +%Y%m%d_%H%M%S)"
    local files_to_backup=()
    
    # Check which files need backing up
    [ -f "CLAUDE.md" ] && files_to_backup+=("CLAUDE.md")
    [ -f "vision.md" ] && files_to_backup+=("vision.md")
    [ -f "spec.md" ] && files_to_backup+=("spec.md")
    [ -f "plan.md" ] && files_to_backup+=("plan.md")
    [ -d ".claude" ] && files_to_backup+=(".claude")
    [ -d ".vibe" ] && files_to_backup+=(".vibe")
    [ -d "issues" ] && files_to_backup+=("issues")
    
    if [ ${#files_to_backup[@]} -gt 0 ]; then
        info "Êó¢Â≠ò„Éï„Ç°„Ç§„É´„Çí„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰∏≠..."
        mkdir -p "$backup_dir"
        
        for item in "${files_to_backup[@]}"; do
            cp -r "$item" "$backup_dir/"
        done
        
        success "„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: $backup_dir"
    fi
}

# Function to run installation
run_installation() {
    section "„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíÈñãÂßã„Åó„Åæ„Åô"
    
    # Step 1: Create directory structure
    if ! create_vibe_structure; then
        error "„Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
        exit 1
    fi
    
    # Step 2: Create CLAUDE.md
    if ! create_claude_md; then
        error "CLAUDE.md„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
        exit 1
    fi
    
    # Step 3: Create slash commands
    if ! create_slash_commands; then
        error "„Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
        exit 1
    fi
    
    # Step 4: Create subagents
    if ! create_subagents; then
        error "Subagent„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
        exit 1
    fi
    
    # Step 5: Create templates
    if ! create_templates; then
        error "„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
        exit 1
    fi
}

# Function to verify installation
verify_installation() {
    section "„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíÊ§úË®º‰∏≠"
    
    local all_good=true
    
    # Verify directory structure
    if verify_structure; then
        success "„Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†: OK"
    else
        error "„Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†: NG"
        all_good=false
    fi
    
    # Verify key files
    local key_files=("CLAUDE.md" "vision.md" "spec.md" "plan.md" ".vibe/state.yaml")
    for file in "${key_files[@]}"; do
        if [ -f "$file" ]; then
            success "$file: OK"
        else
            error "$file: NG"
            all_good=false
        fi
    done
    
    if [ "$all_good" = true ]; then
        success "„Åô„Åπ„Å¶„ÅÆÊ§úË®º„Å´ÂêàÊ†º„Åó„Åæ„Åó„ÅüÔºÅ"
        return 0
    else
        error "‰∏ÄÈÉ®„ÅÆ„Éï„Ç°„Ç§„É´„ÅåÊ≠£„Åó„Åè‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
        return 1
    fi
}

# Function to show completion message
show_completion() {
    section "„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫ÜÔºÅ"
    
    print_color "$GREEN" "
‚úÖ Vibe Coding Framework „ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ

üìù Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:
"
    echo "1. ‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÁ∑®ÈõÜ„Åó„Å¶„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÂÜÖÂÆπ„ÇíË®òÂÖ•„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö"
    echo "   ‚Ä¢ vision.md - „Éó„É≠„ÉÄ„ÇØ„Éà„Éì„Ç∏„Éß„É≥"
    echo "   ‚Ä¢ spec.md   - ‰ªïÊßò„Å®ÊäÄË°ìË®≠Ë®à"
    echo "   ‚Ä¢ plan.md   - ÈñãÁô∫Ë®àÁîª„Å®TODO"
    echo ""
    echo "2. Claude Code „Åß„Åì„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÈñã„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑ"
    echo ""
    echo "3. ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅßÈñãÁô∫„ÇíÈñãÂßã„Åß„Åç„Åæ„ÅôÔºö"
    print_color "$YELLOW" '   "ÈñãÁô∫„Çµ„Ç§„ÇØ„É´„ÇíÈñãÂßã„Åó„Å¶"'
    echo ""
    echo "Âà©Áî®ÂèØËÉΩ„Å™„Ç≥„Éû„É≥„Éâ:"
    echo "   /progress    - ÁèæÂú®„ÅÆÈÄ≤ÊçóÁ¢∫Ë™ç"
    echo "   /healthcheck - Êï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ"
    echo "   /vibe-status - Ë®≠ÂÆöÁ¢∫Ë™ç"
    echo ""
    print_color "$PURPLE" "üéâ Happy Vibe Coding!"
}

# Main function
main() {
    # Parse command line arguments
    parse_arguments "$@"
    
    # Show welcome message
    show_welcome
    
    # Check prerequisites
    info "ÂâçÊèêÊù°‰ª∂„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠..."
    if ! check_prerequisites; then
        error "ÂâçÊèêÊù°‰ª∂„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
        exit 1
    fi
    success "ÂâçÊèêÊù°‰ª∂„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ: OK"
    
    # Check if running in repository
    check_repository_location
    
    # Check for existing installation
    check_existing_installation
    
    # Create backup if needed
    create_backup
    
    # Run installation
    run_installation
    
    # Verify installation
    if verify_installation; then
        show_completion
    else
        error "„Ç§„É≥„Çπ„Éà„Éº„É´„ÅÆÊ§úË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
        warning "ÂïèÈ°å„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Åã„ÇâÂæ©ÂÖÉ„Åß„Åç„Åæ„Åô"
        exit 1
    fi
}

# Run main function
main "$@"